webpackJsonp([0],{79:function(e,a,t){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}var m=t(29),r=l(m),n=t(28),c=l(n),s=r.default.createClass({displayName:"LoginPage",render:function(){return r.default.createElement("div",{className:"container"},r.default.createElement("h1",null,"Iniciar sesion"),r.default.createElement("form",{method:"POST",action:"/login"},r.default.createElement("div",{className:"form-group"},r.default.createElement("label",{htmlFor:"exampleInputEmail1"},"Email address"),r.default.createElement("input",{type:"email",className:"form-control",id:"exampleInputEmail1","aria-describedby":"emailHelp",placeholder:"Enter email"}),r.default.createElement("small",{id:"emailHelp",className:"form-text text-muted"},"We'll never share your email with anyone else.")),r.default.createElement("div",{className:"form-group"},r.default.createElement("label",{htmlFor:"exampleInputPassword1"},"Password"),r.default.createElement("input",{type:"password",className:"form-control",id:"exampleInputPassword1",placeholder:"Password"})),r.default.createElement("div",{className:"form-check"},r.default.createElement("input",{type:"checkbox",className:"form-check-input",id:"exampleCheck1"}),r.default.createElement("label",{className:"form-check-label",htmlFor:"exampleCheck1"},"Check me out")),r.default.createElement("button",{type:"submit",className:"btn btn-primary"},"Submit")))}});c.default.render(r.default.createElement(s,null),document.getElementById("root"))}},[79]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,